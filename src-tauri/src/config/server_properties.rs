use std::fs::{self, File};
use std::io::{BufRead, BufReader, Write};
use std::path::Path;
use std::sync::Arc;
use std::collections::HashMap;

use crate::app_state::AppState;
use crate::error::{AppError, Result};

pub fn read_properties(state: Arc<AppState>) -> Result<HashMap<String, String>> {
    let server_dir = &state.server_directory;
    let properties_path = Path::new(server_dir).join("server.properties");

    if !properties_path.exists() {
        return Ok(HashMap::new());
    }

    let file = File::open(properties_path)?;
    let reader = BufReader::new(file);

    let mut properties = HashMap::new();

    for line in reader.lines() {
        let line = line?;
        let line = line.trim();

        if line.is_empty() || line.starts_with('#') {
            continue;
        }

        if let Some(i) = line.find('=') {
            let key = line[..i].trim().to_string();
            let value = line[(i + 1)..].trim().to_string();
            properties.insert(key, value);
        }
    }

    Ok(properties)
}

pub fn update_properties(
    new_properties: Vec<(String, String)>,
    state: Arc<AppState>
) -> Result<()> {
    let server_dir = &state.server_directory;
    let properties_path = Path::new(server_dir).join("server.properties");

    let mut properties = if properties_path.exists() {
        read_properties(state.clone())?
    } else {
        HashMap::new()
    };

    for (key, value) in new_properties {
        properties.insert(key, value);
    }

    write_properties(properties, state)
}

pub fn write_properties(
    properties: HashMap<String, String>,
    state: Arc<AppState>
) -> Result<()> {
    let server_dir = &state.server_directory;
    let properties_path = Path::new(server_dir).join("server.properties");

    let mut file = File::create(properties_path)?;

    writeln!(file, "#Minecraft server properties")?;
    writeln!(file, "#Generated by Minecraft Server Manager")?;
    writeln!(file, "#{}", chrono::Local::now().to_rfc3339())?;

    let mut keys: Vec<&String> = properties.keys().collect();
    keys.sort();

    for key in keys {
        if let Some(value) = properties.get(key) {
            writeln!(file, "{}={}", key, value)?;
        }
    }

    Ok(())
}

pub fn create_default_properties(state: Arc<AppState>) -> Result<()> {
    let server_dir = &state.server_directory;
    let properties_path = Path::new(server_dir).join("server.properties");

    if properties_path.exists() {
        return Ok(());
    }

    let default_properties = HashMap::from([
        ("server-port".to_string(), "25565".to_string()),
        ("gamemode".to_string(), "survival".to_string()),
        ("difficulty".to_string(), "normal".to_string()),
        ("level-seed".to_string(), "".to_string()),
        ("enable-command-block".to_string(), "false".to_string()),
        ("max-players".to_string(), "20".to_string()),
        ("spawn-protection".to_string(), "16".to_string()),
        ("view-distance".to_string(), "10".to_string()),
        ("spawn-npcs".to_string(), "true".to_string()),
        ("spawn-animals".to_string(), "true".to_string()),
        ("spawn-monsters".to_string(), "true".to_string()),
        ("pvp".to_string(), "true".to_string()),
    ]);

    write_properties(default_properties, state)
}